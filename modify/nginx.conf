user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log debug; # debug log level, can also be set to 'notice'
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream; # binary content type

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;

    keepalive_timeout 65;

    # declare a_or_b variable
    split_clients "${time_iso8601}" $a_or_b {
        50%  siteA;
        50%  siteB;
    }

    # enable compression
    gzip on;
    # > curl localhost -H "Accept-Encoding: gzip" --output - | gunzip

    add_header X-HTTP 1;

    server {
        add_header X-SERVER 1;
        add_header X-COMMON 2;

        listen 80 default_server;
        root /out;

        # the /site* endpoint make use of the split clients above
        location /site {
            return 301 /$a_or_b;
        }
        location /siteA {
            return 200 "A Experience!";
        }
        location /siteB {
            return 200 "B Experience!";
        }

        # rewrite rule to render all /old endpoints to the root endpoint
        # eg: - /old becomes /
        #     - /old/index.html becomes /index.html
        rewrite ^/old/(.*)$ /$1;

        location /inspect {
            add_header X-INSPECT 1;
            add_header X-COMMON 3;

            # set content type response to plain text
            default_type text/plain; # set override default content type to avoid having 2 content types
            # add_header Content-Type text/plain;

            return 200 "$request_uri";
        }

        # regex to replace all jpg images with nginx logo
        location ~ \.jpg$ {
            return 301 /nginx.png;
        }

        # replace text in response
        sub_filter 'http://' 'https://';
        #sub_filter 'nginx news' 'nginx news replaced';
        sub_filter_once off;
    }

}
